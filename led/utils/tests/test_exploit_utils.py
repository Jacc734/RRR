#!/usr/bin/env python
import unittest

import sys, os
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '..'))
from exploit_utils import ExploitUtils

# Execute 'python -m unittest discover -v' to execute all tests from project

class TestExploitUtils(unittest.TestCase):

    def test_create_pattern__pattern_content(self):
        pattern = ExploitUtils.create_pattern(3)
        self.assertEqual(pattern, 'Aa0')
        
        pattern = ExploitUtils.create_pattern()
        self.assertEqual(pattern[len(pattern) - 3::], 'Zz9')
        
        args = {'extended' : ''}
        pattern = ExploitUtils.create_pattern(args=args)
        self.assertEqual(pattern[len(pattern) - 3::], 'Zz%')
    
    def test_create_pattern__pattern_size(self):
        pattern = ExploitUtils.create_pattern(42)
        self.assertEqual(len(pattern), 42)
        
        pattern = ExploitUtils.create_pattern()
        self.assertEqual(len(pattern), 3*10*26**2)

        args = {'extended' : ''}
        pattern = ExploitUtils.create_pattern(args=args)
        self.assertEqual(len(pattern), 3*30*26**2)

        pattern1 = ExploitUtils.create_pattern()
        pattern2 = ExploitUtils.create_pattern(args=args)
        self.assertGreater(len(pattern2), len(pattern1))

    def test_pattern_offset__pattern_pos(self):
        pos = ExploitUtils.pattern_offset('Aa0')
        self.assertEqual(pos, 0)

        pos = ExploitUtils.pattern_offset('Zz9')
        self.assertEqual(pos, 3*10*26**2 - 3)
        
        pos = ExploitUtils.pattern_offset('0x41613041') # Aa0A in hex
        self.assertEqual(pos, 0)

        pos = ExploitUtils.pattern_offset('0x385a7a39') # 8Zz9 in hex
        self.assertEqual(pos, 3*10*26**2 - 4)
        
        pos = ExploitUtils.pattern_offset('0x7a375a7a385a7a39') # 8Zz9 in hex
        self.assertEqual(pos, 3*10*26**2 - 8)

        pos = ExploitUtils.pattern_offset('0x385a7a3z') # 0x and not hex
        self.assertEqual(pos, None)



if __name__ == '__main__':
    unittest.main()
