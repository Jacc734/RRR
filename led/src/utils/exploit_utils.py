#!/usr/bin/env python
#-*- coding: utf-8 -*-

from utils.utils import Utils

class ExploitUtils(object):

    @staticmethod
    def create_pattern(args):
        """
        """

        char1="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        char2="abcdefghijklmnopqrstuvwxyz"
        char3="0123456789"
        int_params = 0

        pattern = []
        size = 0
        for item in args['create_pattern']:
            if item.isdigit():
                size = int(item)
                int_params += 1
            elif item == 'extended':
                char3 += ",.;+=-_!&()#@({})[]%"
            else:
                #TODO: work it
                print('Incorrect parameters')
        if int_params > 1:
            #TODO: print("Incorrect number of integer params. Taking last
            #digit param as sizew for the pattern generation")
            pass
        if size == 0:
            #TODO: print('Max pattern')
            pass

        max_size = (len(char1) * len(char2) * len(char3)) * 3
        if size > max_size:
            pass
        elif size == 0:
            size = max_size
        
        max = int(size)
        while len(pattern) < max:
            for ch1 in char1:
                for ch2 in char2:
                    for ch3 in char3:
                        if len(pattern) < max:
                            pattern.append(ch1)
                        if len(pattern) < max:
                            pattern.append(ch2)
                        if len(pattern) < max:
                            pattern.append(ch3)

        pattern = "".join(pattern)
        return pattern

    @staticmethod
    def pattern_offset(args):
        pos = None
        pattern = ''
        size = 0
        int_params = 0
        cp = []
        for item in args['pattern_offset']:
            if item.isdigit():
                size = int(item)
                int_params += 1
            elif 'extended' == item:
                cp.append('extended')
            else:
                pattern = item
        
        if int_params > 1:
            #TODO: print("Incorrect number of integer params. Taking last
            #digit param as size for the pattern generation")
            pass
        cp.append(str(size))
        new_args = {'create_pattern': cp}
        if pattern:
            cpattern = ExploitUtils.create_pattern(new_args)
            if pattern.startswith('0x'): # if we have a real address
                pattern = Utils.addr_to_byte(pattern)
            if pattern and pattern in cpattern:
                pos = cpattern.find(pattern)
        return pos

if __name__ == '__main__':
    pass

