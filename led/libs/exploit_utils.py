#!/usr/bin/env python
#-*- coding: utf-8 -*-

#from utils.utils import Utils
# temporal fix until path correctly configured
import sys, os
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '..'))
from utils.utils import Utils

class ExploitUtils(object):

    @staticmethod
    def create_pattern(size=0, args=None):
        """
        """
        pattern = []
        if size == 0:
            pass #print("Max pattern")
        if not args:
            args = {}

        char1="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        char2="abcdefghijklmnopqrstuvwxyz"
        char3="0123456789"

        if "extended" in args:
            char3 += ",.;+=-_!&()#@({})[]%"

        max_size = (len(char1) * len(char2) * len(char3)) * 3
        if size > max_size:
            pass
        elif size == 0:
            size = max_size
        
        max = int(size)
        while len(pattern) < max:
            for ch1 in char1:
                for ch2 in char2:
                    for ch3 in char3:
                        if len(pattern) < max:
                            pattern.append(ch1)
                        if len(pattern) < max:
                            pattern.append(ch2)
                        if len(pattern) < max:
                            pattern.append(ch3)

        pattern = "".join(pattern)
        return pattern

    @staticmethod
    def pattern_offset(pattern, size=0, args=None):
        pos = None
        if not args:
            args = {}
        if pattern:
            cpattern = ExploitUtils.create_pattern(size, args)
            if pattern.startswith('0x'): # if we have a real address
                pattern = Utils.addr_to_byte(pattern)
            if pattern and pattern in cpattern:
                pos = cpattern.find(pattern)
        return pos

    @staticmethod
    def gen_payload(ptype='b', args=None):
        res = ''
        if not args:
            args = {}
        if ptype == 'b':
            res = ExploitUtils.__basic_payload(args)
        else:
            print("Payload type not implemented.")
        return res

    @staticmethod
    def __basic_payload(args):
        res = ''
        nops_num = ''
        if 'nops_num' in args:
            nops_num = args['nops_num']
            if nops_num.isdigit():
                nops_num = int(nops_num)
            else:
                print('Number of NOPS parameter should be a digit.')
                return res
        ret_num = ''
        if 'ret_num' in args:
            ret_num = args['ret_num']
            if ret_num.isdigit():
                ret_num = int(ret_num)
            else:
                print('Number of return address repetition  parameter should be a digit.')
                return res
        ret_addr = ''
        if 'ret_addr' in args:
            ret_addr = args['ret_addr']
            ret_addr = Utils.addr_to_byte(ret_addr, bo='le')

        res += '\x90' * nops_num + ret_addr * ret_num
        return res


if __name__ == '__main__':
    pass

