#!/usr/bin/env python

class ExploitUtils(object):

    @staticmethod
    def create_pattern(size=0, args={}):
        """
        """
        if size == 0:
            pass #print("Max pattern")

        char1="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        char2="abcdefghijklmnopqrstuvwxyz"
        char3="0123456789"

        if "extended" in args:
            char3 += ",.;+=-_!&()#@({})[]%"

        max_size = (len(char1) * len(char2) * len(char3)) * 3
        if size > max_size:
            pass
        elif size == 0:
            size = max_size
        
        pattern = []
        max = int(size)
        while len(pattern) < max:
            for ch1 in char1:
                for ch2 in char2:
                    for ch3 in char3:
                        if len(pattern) < max:
                            pattern.append(ch1)
                        if len(pattern) < max:
                            pattern.append(ch2)
                        if len(pattern) < max:
                            pattern.append(ch3)

        pattern = "".join(pattern)
        return pattern

    @staticmethod
    def pattern_offset(pattern, size=0, args={}):
        pos = None
        if not pattern:
            return
        cpattern = ExploitUtils.create_pattern(size, args)
        if pattern.startswith('0x'):
            pattern = pattern.lstrip('0x')
            try:
                if len(pattern) == 8:
                    pattern = "".join(
                        chr(int(pattern[0]+pattern[1], 16)) +
                        chr(int(pattern[2]+pattern[3], 16)) +
                        chr(int(pattern[4]+pattern[5], 16)) +
                        chr(int(pattern[6]+pattern[7], 16))
                                    )
                elif len(pattern) == 16:
                    pattern = "".join(
                        chr(int(pattern[0]+pattern[1], 16)) +
                        chr(int(pattern[2]+pattern[3], 16)) +
                        chr(int(pattern[4]+pattern[5], 16)) +
                        chr(int(pattern[6]+pattern[7], 16)) +
                        chr(int(pattern[8]+pattern[9], 16)) +
                        chr(int(pattern[10]+pattern[11], 16)) +
                        chr(int(pattern[12]+pattern[13], 16)) +
                        chr(int(pattern[14]+pattern[15], 16))
                                    )
                else:
                    print("arch not supported")
            except ValueError as e:
                print("Error parsing pattern - 0x value not hex: {0}".format(e))

        if pattern in cpattern:
            pos = cpattern.find(pattern)
        
        return pos


if __name__ == '__main__':
    print ExploitUtils.create_pattern()
