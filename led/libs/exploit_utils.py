#!/usr/bin/env python
#-*- coding: utf-8 -*-

#from utils.utils import Utils
# temporal fix until path correctly configured
import sys, os
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '..'))
from utils.utils import Utils

class ExploitUtils(object):

    @staticmethod
    def create_pattern(size=0, args={}):
        """
        """
        if size == 0:
            pass #print("Max pattern")

        char1="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        char2="abcdefghijklmnopqrstuvwxyz"
        char3="0123456789"

        if "extended" in args:
            char3 += ",.;+=-_!&()#@({})[]%"

        max_size = (len(char1) * len(char2) * len(char3)) * 3
        if size > max_size:
            pass
        elif size == 0:
            size = max_size
        
        pattern = []
        max = int(size)
        while len(pattern) < max:
            for ch1 in char1:
                for ch2 in char2:
                    for ch3 in char3:
                        if len(pattern) < max:
                            pattern.append(ch1)
                        if len(pattern) < max:
                            pattern.append(ch2)
                        if len(pattern) < max:
                            pattern.append(ch3)

        pattern = "".join(pattern)
        return pattern

    @staticmethod
    def pattern_offset(pattern, size=0, args={}):
        pos = None
        if pattern:
            cpattern = ExploitUtils.create_pattern(size, args)
            if pattern.startswith('0x'): # if we have a real address
                pattern = Utils.addr_to_ascii(pattern)
            if pattern and pattern in cpattern:
                pos = cpattern.find(pattern)
        return pos

    def gen_payload(nops_num, ret_addr, ptype='basic'):
        pass

if __name__ == '__main__':
    print ExploitUtils.create_pattern()
