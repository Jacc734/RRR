	[IE8_PRECISE_1]

1. Execute:
	- $ cd "C:\Documents and Settings\Administrator\Desktop\lacon2k14"
	- $ python -m SimpleHTTPServer 8080

2. Open http://127.0.0.1/ie8_precise_1.html and attach to it with WinDBG

3. Search for for unicode string "TEST":
	- $ s -u 0 0x5000000 "TEST"
	[*] We see that chunks are NOT aligned as in WinXP.

What happens? Now ASLR comes into play, so heap base varies.

*(Don't close debugger!)

	[HEAPALLOC]

4. Show code of HeapAlloc and execute it multiple times:
	[*] Show final result of the many executions (they have great variance)
	[*] Show how in the same execution, some chunks are randomized!

5. Show code of HeapAlloc2 and execute it multiple times:
	[*] Show how in the same execution, chunks are allocated consecutively.
	[*] Show that there are a very low variance in the result.
	--> Check the graphic that justifies that this variance does not affect
	--> Explain about VirtualMemoryThreshold and show its value in debugger!
		- !heap -stat      		# obtain main process heap (probably 0x490000)
		- dt _HEAP -h 490000 	#  +0x060 VirtualMemoryThreshold : 0xfe00   <-- BLOCKS (8 bytes)


	[IE8_PRECISE_2]

6. Open http://127.0.0.1/ie8_precise_2.html and attach to it with WinDBG
	[*] We only changed large chunks from 0x8000 to 0x80000 (and only repeat 0x500 times)

7. Search for for unicode string "TEST":
	-  s -u 0 L?5000000 "TEST"
	[*] We can see that all chunks have the same size 0x4000 and are ALIGNED!

8. Address is already computed in ie8_precise_2. So show address 08080808 in mem map! Great!




	[XPL]

9. In debugger (ie8_precise_2), show how all modules have ASLR.
	- .load pykd.pyd
	- !py mona modules

10. Show the exploit and open it with the browser! Own3d! http://127.0.0.1/xpl.html (talk about the java applet - Non-ASLR modules loaded)
